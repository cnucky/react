// Generated by method-generator.js. DOT NOT MODIFY!ยฃยก

var _ = require('underscore');
var path = require('path');
var jws = require(path.join(process.cwd(), 'utils/jws'));
var appConfig = require('../config.js');
var url = 'http://' + appConfig['app-common'] + '/BusinessLib/services/BusinessLibService?wsdl';

module.exports = function (req, res) {
	return {
		

			"ConvertTableRecord": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "ConvertTableRecord", args, callback, req, res);
			},
			

			"DelTransRule": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "DelTransRule", args, callback, req, res);
			},
			

			"GetDataTransferInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetDataTransferInfo", args, callback, req, res);
			},
			

			"GetDefaultTransRule": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetDefaultTransRule", args, callback, req, res);
			},
			

			"GetDicDataInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetDicDataInfo", args, callback, req, res);
			},
			

			"GetTableDefaultValue": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetTableDefaultValue", args, callback, req, res);
			},
			

			"GetTransRuleById": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetTransRuleById", args, callback, req, res);
			},
			

			"GetTransRuleListInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetTransRuleListInfo", args, callback, req, res);
			},
			

			"InsertDYRightInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "InsertDYRightInfo", args, callback, req, res);
			},
			

			"InsertLogInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "InsertLogInfo", args, callback, req, res);
			},
			

			"InsertTableFlag": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "InsertTableFlag", args, callback, req, res);
			},
			

			"UpdateTransRule": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "UpdateTransRule", args, callback, req, res);
			},
			

			"deleteAttachment": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteAttachment", args, callback, req, res);
			},
			

			"deleteTableDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteTableDetail", args, callback, req, res);
			},
			

			"downloadAttachment": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "downloadAttachment", args, callback, req, res);
			},
			

			"downloadPhoto": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "downloadPhoto", args, callback, req, res);
			},
			

			"getCodeTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getCodeTable", args, callback, req, res);
			},
			

			"getFieldAttachmentInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getFieldAttachmentInfo", args, callback, req, res);
			},
			

			"getFieldIdAndFieldNameMap": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getFieldIdAndFieldNameMap", args, callback, req, res);
			},
			

			"getInitTableData": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getInitTableData", args, callback, req, res);
			},
			

			"getRecordVersionId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getRecordVersionId", args, callback, req, res);
			},
			

			"getTableDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTableDetail", args, callback, req, res);
			},
			

			"getTableRelationInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTableRelationInfo", args, callback, req, res);
			},
			

			"insertTableDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "insertTableDetail", args, callback, req, res);
			},
			

			"insertTransferRecordTableDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "insertTransferRecordTableDetail", args, callback, req, res);
			},
			

			"transFieldFromCodeToValue": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "transFieldFromCodeToValue", args, callback, req, res);
			},
			

			"updateTableDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateTableDetail", args, callback, req, res);
			},
			

			"uploadAttachment": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "uploadAttachment", args, callback, req, res);
			},
			

		url: 'http://' + appConfig['app-common'] + '/BusinessLib/services/BusinessLibService?wsdl'
	}

}