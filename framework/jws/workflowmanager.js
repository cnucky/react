// Generated by method-generator.js. DOT NOT MODIFY!ยฃยก

var _ = require('underscore');
var path = require('path');
var jws = require(path.join(process.cwd(), 'utils/jws'));
var appConfig = require('../config.js');
var url = 'http://' + appConfig['app-common'] + '/WorkflowManager/services/ProcessService?wsdl';

module.exports = function (req, res) {
	return {
		

			"ActivateProcess": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "ActivateProcess", args, callback, req, res);
			},
			

			"CompletePersonalTask": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "CompletePersonalTask", args, callback, req, res);
			},
			

			"DeleteHisTask": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "DeleteHisTask", args, callback, req, res);
			},
			

			"DeleteProcess": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "DeleteProcess", args, callback, req, res);
			},
			

			"DeleteProcessIns": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "DeleteProcessIns", args, callback, req, res);
			},
			

			"DeployProcess": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "DeployProcess", args, callback, req, res);
			},
			

			"FindDiagram": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "FindDiagram", args, callback, req, res);
			},
			

			"FindProcessDefinitionInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "FindProcessDefinitionInfo", args, callback, req, res);
			},
			

			"FindProcessDefinitions": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "FindProcessDefinitions", args, callback, req, res);
			},
			

			"FindProcessInstanceInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "FindProcessInstanceInfo", args, callback, req, res);
			},
			

			"GetActInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetActInfo", args, callback, req, res);
			},
			

			"GetAssigneeForReset": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetAssigneeForReset", args, callback, req, res);
			},
			

			"GetBusinessDataStatus": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetBusinessDataStatus", args, callback, req, res);
			},
			

			"GetBusinessHistory": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetBusinessHistory", args, callback, req, res);
			},
			

			"GetBusinessState": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetBusinessState", args, callback, req, res);
			},
			

			"GetExtensionInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetExtensionInfo", args, callback, req, res);
			},
			

			"GetFirstActInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetFirstActInfo", args, callback, req, res);
			},
			

			"GetFirstAssignees": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetFirstAssignees", args, callback, req, res);
			},
			

			"GetIssuesListByID": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetIssuesListByID", args, callback, req, res);
			},
			

			"GetIssuesListBySQL": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetIssuesListBySQL", args, callback, req, res);
			},
			

			"GetIssuesListByType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetIssuesListByType", args, callback, req, res);
			},
			

			"GetIssuesTypeList": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetIssuesTypeList", args, callback, req, res);
			},
			

			"GetNextActInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetNextActInfo", args, callback, req, res);
			},
			

			"GetNextAssignees": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetNextAssignees", args, callback, req, res);
			},
			

			"GetNextAssigneesByOperate": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetNextAssigneesByOperate", args, callback, req, res);
			},
			

			"GetNextAssigneesForHisTask": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetNextAssigneesForHisTask", args, callback, req, res);
			},
			

			"GetProcessInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetProcessInfo", args, callback, req, res);
			},
			

			"GetRuntimeDiagram": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetRuntimeDiagram", args, callback, req, res);
			},
			

			"GetToDoIssuesByUserId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetToDoIssuesByUserId", args, callback, req, res);
			},
			

			"ModifyProcessName": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "ModifyProcessName", args, callback, req, res);
			},
			

			"RecallTask": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "RecallTask", args, callback, req, res);
			},
			

			"ResetAssignee": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "ResetAssignee", args, callback, req, res);
			},
			

			"SuspendedProcess": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "SuspendedProcess", args, callback, req, res);
			},
			

			"UpdateRelationInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "UpdateRelationInfo", args, callback, req, res);
			},
			

			"deleteProcessInstance": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteProcessInstance", args, callback, req, res);
			},
			

			"getTaskExtraInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTaskExtraInfo", args, callback, req, res);
			},
			

			"startProcess": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "startProcess", args, callback, req, res);
			},
			

		url: 'http://' + appConfig['app-common'] + '/WorkflowManager/services/ProcessService?wsdl'
	}

}