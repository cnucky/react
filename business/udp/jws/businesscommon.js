// Generated by method-generator.js. DOT NOT MODIFY!ยฃยก

var _ = require('underscore');
var path = require('path');
var jws = require(path.join(process.cwd(), 'utils/jws'));
var appConfig = require('../config.js');
var url = 'http://' + appConfig['app-common'] + '/BusinessCommon/services/BusinessCommonService?wsdl';

module.exports = function (req, res) {
	return {
		

			"AddRecordAndContrastResult": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "AddRecordAndContrastResult", args, callback, req, res);
			},
			

			"acquireYTHIndexRequests": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "acquireYTHIndexRequests", args, callback, req, res);
			},
			

			"addNumber": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addNumber", args, callback, req, res);
			},
			

			"addObject": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addObject", args, callback, req, res);
			},
			

			"addObjectRelation": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addObjectRelation", args, callback, req, res);
			},
			

			"addProgress": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addProgress", args, callback, req, res);
			},
			

			"addRecordLabel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addRecordLabel", args, callback, req, res);
			},
			

			"addTargetParticipant": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addTargetParticipant", args, callback, req, res);
			},
			

			"createLabel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "createLabel", args, callback, req, res);
			},
			

			"deleteLabel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteLabel", args, callback, req, res);
			},
			

			"deleteNumber": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteNumber", args, callback, req, res);
			},
			

			"deleteObject": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteObject", args, callback, req, res);
			},
			

			"deleteObjectRelation": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteObjectRelation", args, callback, req, res);
			},
			

			"deleteRecords": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteRecords", args, callback, req, res);
			},
			

			"deleteTargetParticipant": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteTargetParticipant", args, callback, req, res);
			},
			

			"get4GModuleId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "get4GModuleId", args, callback, req, res);
			},
			

			"getAllLabel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getAllLabel", args, callback, req, res);
			},
			

			"getAllTablesRecords4Authority": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getAllTablesRecords4Authority", args, callback, req, res);
			},
			

			"getAllUsedLabel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getAllUsedLabel", args, callback, req, res);
			},
			

			"getBusinessTblType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getBusinessTblType", args, callback, req, res);
			},
			

			"getClassifiedTableType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getClassifiedTableType", args, callback, req, res);
			},
			

			"getCustomizedTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getCustomizedTable", args, callback, req, res);
			},
			

			"getModuleWorkingTree": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getModuleWorkingTree", args, callback, req, res);
			},
			

			"getNumber": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNumber", args, callback, req, res);
			},
			

			"getNumberBasicInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNumberBasicInfo", args, callback, req, res);
			},
			

			"getNumberMetaInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNumberMetaInfo", args, callback, req, res);
			},
			

			"getNumberQueryRecords": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNumberQueryRecords", args, callback, req, res);
			},
			

			"getNumberTableFieldCodeTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNumberTableFieldCodeTable", args, callback, req, res);
			},
			

			"getNumberTableListConstruct": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNumberTableListConstruct", args, callback, req, res);
			},
			

			"getNumberTableMetaInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNumberTableMetaInfo", args, callback, req, res);
			},
			

			"getObjectBasicInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getObjectBasicInfo", args, callback, req, res);
			},
			

			"getObjectBasicInfoMeta": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getObjectBasicInfoMeta", args, callback, req, res);
			},
			

			"getObjectRelation": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getObjectRelation", args, callback, req, res);
			},
			

			"getParticipant": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getParticipant", args, callback, req, res);
			},
			

			"getPersonCoreNumberType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getPersonCoreNumberType", args, callback, req, res);
			},
			

			"getProgressInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getProgressInfo", args, callback, req, res);
			},
			

			"getRecIdFromTargetId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getRecIdFromTargetId", args, callback, req, res);
			},
			

			"getRecordContrastResult": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getRecordContrastResult", args, callback, req, res);
			},
			

			"getRecordDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getRecordDetail", args, callback, req, res);
			},
			

			"getRecordDetailUrl": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getRecordDetailUrl", args, callback, req, res);
			},
			

			"getRecordLabel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getRecordLabel", args, callback, req, res);
			},
			

			"getRecordSummary": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getRecordSummary", args, callback, req, res);
			},
			

			"getRecordsAuth": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getRecordsAuth", args, callback, req, res);
			},
			

			"getRelatedTargetInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getRelatedTargetInfo", args, callback, req, res);
			},
			

			"getSummaryInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getSummaryInfo", args, callback, req, res);
			},
			

			"getTableDispFieldInitTableData": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTableDispFieldInitTableData", args, callback, req, res);
			},
			

			"getTableFieldCodeTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTableFieldCodeTable", args, callback, req, res);
			},
			

			"getTableListByLabel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTableListByLabel", args, callback, req, res);
			},
			

			"getTableListConstruct": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTableListConstruct", args, callback, req, res);
			},
			

			"getTableResourcePermissionsByUserId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTableResourcePermissionsByUserId", args, callback, req, res);
			},
			

			"getTableRuleInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTableRuleInfo", args, callback, req, res);
			},
			

			"getTargetParticipant": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTargetParticipant", args, callback, req, res);
			},
			

			"getTblRecordDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTblRecordDetail", args, callback, req, res);
			},
			

			"getTblRecordList": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTblRecordList", args, callback, req, res);
			},
			

			"getTblRecordListFromSpecifiedTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTblRecordListFromSpecifiedTable", args, callback, req, res);
			},
			

			"getUsersRecordAuthority": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getUsersRecordAuthority", args, callback, req, res);
			},
			

			"getYWTableIdForModule": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getYWTableIdForModule", args, callback, req, res);
			},
			

			"getYWTableQueryListConstruct": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getYWTableQueryListConstruct", args, callback, req, res);
			},
			

			"getYWTableQueryRecords": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getYWTableQueryRecords", args, callback, req, res);
			},
			

			"getYWtables": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getYWtables", args, callback, req, res);
			},
			

			"insertTableDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "insertTableDetail", args, callback, req, res);
			},
			

			"insertTableRecord": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "insertTableRecord", args, callback, req, res);
			},
			

			"insertTableRecord2SpecifiedTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "insertTableRecord2SpecifiedTable", args, callback, req, res);
			},
			

			"insertTransferRecordTableDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "insertTransferRecordTableDetail", args, callback, req, res);
			},
			

			"isParticipantHaveAssignPermission": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "isParticipantHaveAssignPermission", args, callback, req, res);
			},
			

			"isTargetHasTableRecFlow": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "isTargetHasTableRecFlow", args, callback, req, res);
			},
			

			"passRoundRecord": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "passRoundRecord", args, callback, req, res);
			},
			

			"removeRecordLabel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "removeRecordLabel", args, callback, req, res);
			},
			

			"sendYTHIndexResponds": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "sendYTHIndexResponds", args, callback, req, res);
			},
			

			"updateNumber": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateNumber", args, callback, req, res);
			},
			

			"updateObjectBasicInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateObjectBasicInfo", args, callback, req, res);
			},
			

			"updateObjectBasicInfoWithSubTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateObjectBasicInfoWithSubTable", args, callback, req, res);
			},
			

			"updateObjectRelation": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateObjectRelation", args, callback, req, res);
			},
			

			"updateTableRecord": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateTableRecord", args, callback, req, res);
			},
			

			"updateTableRecordOnSpecifiedTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateTableRecordOnSpecifiedTable", args, callback, req, res);
			},
			

			"updateTargetParticipant": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateTargetParticipant", args, callback, req, res);
			},
			

			"updateUsersRecordAuthority": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateUsersRecordAuthority", args, callback, req, res);
			},
			

		url: 'http://' + appConfig['app-common'] + '/BusinessCommon/services/BusinessCommonService?wsdl'
	}

}