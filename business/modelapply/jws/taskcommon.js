// Generated by method-generator.js. DOT NOT MODIFY!ยฃยก

var _ = require('underscore');
var path = require('path');
var jws = require(path.join(process.cwd(), 'utils/jws'));
var appConfig = require('../config.js');
var url = 'http://' + appConfig['dc-analysis'] + ':8080/CloudTaskCommon/services/TaskCommonService?wsdl';

module.exports = function (req, res) {
	return {
		

			"addPersonFavor": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addPersonFavor", args, callback, req, res);
			},
			

			"batchQueryDataType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "batchQueryDataType", args, callback, req, res);
			},
			

			"cancelTask": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "cancelTask", args, callback, req, res);
			},
			

			"checkExpression": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "checkExpression", args, callback, req, res);
			},
			

			"checkModelPermission": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "checkModelPermission", args, callback, req, res);
			},
			

			"checkTaskReportExist": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "checkTaskReportExist", args, callback, req, res);
			},
			

			"countResults": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "countResults", args, callback, req, res);
			},
			

			"delGisQueryConfig": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "delGisQueryConfig", args, callback, req, res);
			},
			

			"delPersonFavor": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "delPersonFavor", args, callback, req, res);
			},
			

			"deleteBiReportByIds": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteBiReportByIds", args, callback, req, res);
			},
			

			"deleteBiReportByTaskIds": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteBiReportByTaskIds", args, callback, req, res);
			},
			

			"deleteModel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteModel", args, callback, req, res);
			},
			

			"deleteSolidModel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "deleteSolidModel", args, callback, req, res);
			},
			

			"exportDataToExcel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "exportDataToExcel", args, callback, req, res);
			},
			

			"extractCondInSolid": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "extractCondInSolid", args, callback, req, res);
			},
			

			"getAllBiReportInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getAllBiReportInfo", args, callback, req, res);
			},
			

			"getAllDataSourceInSolid": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getAllDataSourceInSolid", args, callback, req, res);
			},
			

			"getAllSolidModelInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getAllSolidModelInfo", args, callback, req, res);
			},
			

			"getBiReportInfoByDirId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getBiReportInfoByDirId", args, callback, req, res);
			},
			

			"getCodeTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getCodeTable", args, callback, req, res);
			},
			

			"getCodeTableBatch": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getCodeTableBatch", args, callback, req, res);
			},
			

			"getCodeTableByCode": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getCodeTableByCode", args, callback, req, res);
			},
			

			"getColTransformFunction": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getColTransformFunction", args, callback, req, res);
			},
			

			"getDataType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getDataType", args, callback, req, res);
			},
			

			"getDataType4G": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getDataType4G", args, callback, req, res);
			},
			

			"getDataTypeDir": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getDataTypeDir", args, callback, req, res);
			},
			

			"getDataTypeQueryConfig": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getDataTypeQueryConfig", args, callback, req, res);
			},
			

			"getFieldAliasName": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getFieldAliasName", args, callback, req, res);
			},
			

			"getFieldMapOfDataSources": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getFieldMapOfDataSources", args, callback, req, res);
			},
			

			"getGisQueryConfig": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getGisQueryConfig", args, callback, req, res);
			},
			

			"getGroupStatFunction": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getGroupStatFunction", args, callback, req, res);
			},
			

			"getMindPageResult": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getMindPageResult", args, callback, req, res);
			},
			

			"getModel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getModel", args, callback, req, res);
			},
			

			"getModelDir": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getModelDir", args, callback, req, res);
			},
			

			"getModelReportDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getModelReportDetail", args, callback, req, res);
			},
			

			"getNoCondTaskDetailByTaskId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNoCondTaskDetailByTaskId", args, callback, req, res);
			},
			

			"getNodeLog": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNodeLog", args, callback, req, res);
			},
			

			"getNodeOutput": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNodeOutput", args, callback, req, res);
			},
			

			"getPartitionCondInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getPartitionCondInfo", args, callback, req, res);
			},
			

			"getPersonFavor": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getPersonFavor", args, callback, req, res);
			},
			

			"getResult": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getResult", args, callback, req, res);
			},
			

			"getResultFile": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getResultFile", args, callback, req, res);
			},
			

			"getResultMeta": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getResultMeta", args, callback, req, res);
			},
			

			"getSearchItem": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getSearchItem", args, callback, req, res);
			},
			

			"getSemanticDefine": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getSemanticDefine", args, callback, req, res);
			},
			

			"getSolid": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getSolid", args, callback, req, res);
			},
			

			"getSolidModelInfoByDirId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getSolidModelInfoByDirId", args, callback, req, res);
			},
			

			"getStreamCodeTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getStreamCodeTable", args, callback, req, res);
			},
			

			"getStreamCodeTableByCode": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getStreamCodeTableByCode", args, callback, req, res);
			},
			

			"getStreamNodes": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getStreamNodes", args, callback, req, res);
			},
			

			"getStreamRunningInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getStreamRunningInfo", args, callback, req, res);
			},
			

			"getStreamTaskDataTypes": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getStreamTaskDataTypes", args, callback, req, res);
			},
			

			"getSubTaskByStreamId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getSubTaskByStreamId", args, callback, req, res);
			},
			

			"getSubTaskInfoByTaskId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getSubTaskInfoByTaskId", args, callback, req, res);
			},
			

			"getTaskDetailByTaskId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTaskDetailByTaskId", args, callback, req, res);
			},
			

			"getTaskReport": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTaskReport", args, callback, req, res);
			},
			

			"getUserModels": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getUserModels", args, callback, req, res);
			},
			

			"getViewDetailInSolid": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getViewDetailInSolid", args, callback, req, res);
			},
			

			"logForSubmitTask": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "logForSubmitTask", args, callback, req, res);
			},
			

			"openModel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "openModel", args, callback, req, res);
			},
			

			"openOriginalModel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "openOriginalModel", args, callback, req, res);
			},
			

			"pauseStreamTask": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "pauseStreamTask", args, callback, req, res);
			},
			

			"previewNodeData": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "previewNodeData", args, callback, req, res);
			},
			

			"previewNodeData_old": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "previewNodeData_old", args, callback, req, res);
			},
			

			"queryReportData": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "queryReportData", args, callback, req, res);
			},
			

			"replaceNodeMapColumns": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "replaceNodeMapColumns", args, callback, req, res);
			},
			

			"saveGisQueryConfig": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "saveGisQueryConfig", args, callback, req, res);
			},
			

			"saveModel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "saveModel", args, callback, req, res);
			},
			

			"saveModelReportDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "saveModelReportDetail", args, callback, req, res);
			},
			

			"saveOriginalModel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "saveOriginalModel", args, callback, req, res);
			},
			

			"saveTask": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "saveTask", args, callback, req, res);
			},
			

			"saveTaskReport": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "saveTaskReport", args, callback, req, res);
			},
			

			"saveViewDetailInSolid": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "saveViewDetailInSolid", args, callback, req, res);
			},
			

			"submitTask": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "submitTask", args, callback, req, res);
			},
			

			"submitValuesInSolid": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "submitValuesInSolid", args, callback, req, res);
			},
			

			"updateBiReportInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateBiReportInfo", args, callback, req, res);
			},
			

			"updateDataTypeQueryConfig": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateDataTypeQueryConfig", args, callback, req, res);
			},
			

			"updateModel": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateModel", args, callback, req, res);
			},
			

			"updateNodeDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateNodeDetail", args, callback, req, res);
			},
			

			"updateSolidModelInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateSolidModelInfo", args, callback, req, res);
			},
			

			"updateTaskReport": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateTaskReport", args, callback, req, res);
			},
			

			"updateTaskStatus": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateTaskStatus", args, callback, req, res);
			},
			

		url: 'http://' + appConfig['dc-analysis'] + ':8080/CloudTaskCommon/services/TaskCommonService?wsdl'
	}

}