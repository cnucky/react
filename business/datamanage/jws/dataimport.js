// Generated by method-generator.js. DOT NOT MODIFY!ยฃยก

var _ = require('underscore');
var path = require('path');
var jws = require(path.join(process.cwd(), 'utils/jws'));
var appConfig = require('../config.js');
var url = 'http://' + appConfig['dc-analysis'] + '/DI_WS/services/DataImportService?wsdl';

module.exports = function (req, res) {
	return {
		

			"CheckUploadResult": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "CheckUploadResult", args, callback, req, res);
			},
			

			"CheckWatchDirIsUnique": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "CheckWatchDirIsUnique", args, callback, req, res);
			},
			

			"CreateDir": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "CreateDir", args, callback, req, res);
			},
			

			"GetAllBatchsLoadStatInfoWithInterval": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetAllBatchsLoadStatInfoWithInterval", args, callback, req, res);
			},
			

			"GetAllDataRecord": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetAllDataRecord", args, callback, req, res);
			},
			

			"GetAllDataTypeBusinessTimeStatInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetAllDataTypeBusinessTimeStatInfo", args, callback, req, res);
			},
			

			"GetAllDataTypeLoadStatInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetAllDataTypeLoadStatInfo", args, callback, req, res);
			},
			

			"GetAllDir": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetAllDir", args, callback, req, res);
			},
			

			"GetAllUsablePreProcessRules": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetAllUsablePreProcessRules", args, callback, req, res);
			},
			

			"GetAllUsersLoadStatInfoWithInterval": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetAllUsersLoadStatInfoWithInterval", args, callback, req, res);
			},
			

			"GetCenterCodeInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetCenterCodeInfo", args, callback, req, res);
			},
			

			"GetDataRecordByDate": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetDataRecordByDate", args, callback, req, res);
			},
			

			"GetDataTypeAfterFilter": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetDataTypeAfterFilter", args, callback, req, res);
			},
			

			"GetDataTypeWithTag": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetDataTypeWithTag", args, callback, req, res);
			},
			

			"GetDataTypesBusinessTimeWithInterval": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetDataTypesBusinessTimeWithInterval", args, callback, req, res);
			},
			

			"GetDataTypesLoadInfoWithInterval": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetDataTypesLoadInfoWithInterval", args, callback, req, res);
			},
			

			"GetSimpleDate": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetSimpleDate", args, callback, req, res);
			},
			

			"GetSrcDatatypeInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetSrcDatatypeInfo", args, callback, req, res);
			},
			

			"GetSrcDatatypeInfoByType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetSrcDatatypeInfoByType", args, callback, req, res);
			},
			

			"GetSrcHeaderInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetSrcHeaderInfo", args, callback, req, res);
			},
			

			"GetSrcHeaderInfoByType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetSrcHeaderInfoByType", args, callback, req, res);
			},
			

			"GetSystemConfig": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "GetSystemConfig", args, callback, req, res);
			},
			

			"PreView": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "PreView", args, callback, req, res);
			},
			

			"RegisterBatchAndFileID": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "RegisterBatchAndFileID", args, callback, req, res);
			},
			

			"ShowTableInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "ShowTableInfo", args, callback, req, res);
			},
			

			"ShowTables": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "ShowTables", args, callback, req, res);
			},
			

			"UpdateBatchAndFileID": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "UpdateBatchAndFileID", args, callback, req, res);
			},
			

			"UpdateOwnerForDataType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "UpdateOwnerForDataType", args, callback, req, res);
			},
			

			"UpdateZoneForDataType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "UpdateZoneForDataType", args, callback, req, res);
			},
			

			"UploadFileRegist": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "UploadFileRegist", args, callback, req, res);
			},
			

			"genDocumentId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "genDocumentId", args, callback, req, res);
			},
			

		url: 'http://' + appConfig['dc-analysis'] + '/DI_WS/services/DataImportService?wsdl'
	}

}