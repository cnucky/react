// Generated by method-generator.js. DOT NOT MODIFY!ยฃยก

var _ = require('underscore');
var path = require('path');
var jws = require(path.join(process.cwd(), 'utils/jws'));
var appConfig = require('../config.js');
var url = 'http://' + appConfig['dc-analysis'] + '/EnemyAccumulation/services/EnemyAccumulationService?wsdl';

module.exports = function (req, res) {
	return {
		

			"getCPEntityType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getCPEntityType", args, callback, req, res);
			},
			

			"getCaseProperty": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getCaseProperty", args, callback, req, res);
			},
			

			"getCodeTable": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getCodeTable", args, callback, req, res);
			},
			

			"getEntityPropertyMetaDataForSensing": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getEntityPropertyMetaDataForSensing", args, callback, req, res);
			},
			

			"getNumberType": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getNumberType", args, callback, req, res);
			},
			

			"getPeopleDetail": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getPeopleDetail", args, callback, req, res);
			},
			

			"getPeopleDetailValue": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getPeopleDetailValue", args, callback, req, res);
			},
			

			"getPeopleDetailValueForSensing": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getPeopleDetailValueForSensing", args, callback, req, res);
			},
			

			"getPeoplePhoto": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getPeoplePhoto", args, callback, req, res);
			},
			

			"getProperties": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getProperties", args, callback, req, res);
			},
			

			"getTargetIdByCaseTypeForSensing": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTargetIdByCaseTypeForSensing", args, callback, req, res);
			},
			

			"getTargetIdByNumberForSensing": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTargetIdByNumberForSensing", args, callback, req, res);
			},
			

			"insertPeopleForSensing": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "insertPeopleForSensing", args, callback, req, res);
			},
			

			"queryLocalDeptNumber": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "queryLocalDeptNumber", args, callback, req, res);
			},
			

			"queryNumber": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "queryNumber", args, callback, req, res);
			},
			

			"registerNumber": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "registerNumber", args, callback, req, res);
			},
			

			"verifyNumber": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "verifyNumber", args, callback, req, res);
			},
			

		url: 'http://' + appConfig['dc-analysis'] + '/EnemyAccumulation/services/EnemyAccumulationService?wsdl'
	}

}