// Generated by method-generator.js. DOT NOT MODIFY!ยฃยก

var _ = require('underscore');
var path = require('path');
var jws = require(path.join(process.cwd(), 'utils/jws'));
var appConfig = require('../config.js');
var url = 'http://' + appConfig['app-common'] + '/CloudUserManagement/services/UserManageService?wsdl';

module.exports = function (req, res) {
	return {
		

			"addDepartment": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addDepartment", args, callback, req, res);
			},
			

			"addUser": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addUser", args, callback, req, res);
			},
			

			"addUserGroup": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addUserGroup", args, callback, req, res);
			},
			

			"addUserToUserGroup": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "addUserToUserGroup", args, callback, req, res);
			},
			

			"delDepartment": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "delDepartment", args, callback, req, res);
			},
			

			"delUser": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "delUser", args, callback, req, res);
			},
			

			"delUserFromUserGroup": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "delUserFromUserGroup", args, callback, req, res);
			},
			

			"delUserGroup": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "delUserGroup", args, callback, req, res);
			},
			

			"getAllDepartmentsAndUsers": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getAllDepartmentsAndUsers", args, callback, req, res);
			},
			

			"getAllGroupAndUsers": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getAllGroupAndUsers", args, callback, req, res);
			},
			

			"getAllUserIdName": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getAllUserIdName", args, callback, req, res);
			},
			

			"getAllUserPosition": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getAllUserPosition", args, callback, req, res);
			},
			

			"getDepartmentById": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getDepartmentById", args, callback, req, res);
			},
			

			"getDepartments": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getDepartments", args, callback, req, res);
			},
			

			"getMyGroups": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getMyGroups", args, callback, req, res);
			},
			

			"getSubDepartments": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getSubDepartments", args, callback, req, res);
			},
			

			"getTingJuDepartments": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTingJuDepartments", args, callback, req, res);
			},
			

			"getUserGroups": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getUserGroups", args, callback, req, res);
			},
			

			"getUserNameByUserId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getUserNameByUserId", args, callback, req, res);
			},
			

			"getUserProfile": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getUserProfile", args, callback, req, res);
			},
			

			"getUsers": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getUsers", args, callback, req, res);
			},
			

			"getUsersByDepartmentId": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getUsersByDepartmentId", args, callback, req, res);
			},
			

			"loadDepartment": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "loadDepartment", args, callback, req, res);
			},
			

			"loadGroup": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "loadGroup", args, callback, req, res);
			},
			

			"lockUser": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "lockUser", args, callback, req, res);
			},
			

			"moveDepartment": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "moveDepartment", args, callback, req, res);
			},
			

			"moveGroupUsers": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "moveGroupUsers", args, callback, req, res);
			},
			

			"moveUsersToDepartment": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "moveUsersToDepartment", args, callback, req, res);
			},
			

			"resetAccountExpireTime": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "resetAccountExpireTime", args, callback, req, res);
			},
			

			"resetPassword": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "resetPassword", args, callback, req, res);
			},
			

			"searchUsersByKeyword": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "searchUsersByKeyword", args, callback, req, res);
			},
			

			"unlockUser": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "unlockUser", args, callback, req, res);
			},
			

			"updateDepartment": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateDepartment", args, callback, req, res);
			},
			

			"updatePassword": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updatePassword", args, callback, req, res);
			},
			

			"updateUser": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateUser", args, callback, req, res);
			},
			

			"updateUserGroup": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "updateUserGroup", args, callback, req, res);
			},
			

			"verifyPassword": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "verifyPassword", args, callback, req, res);
			},
			

		url: 'http://' + appConfig['app-common'] + '/CloudUserManagement/services/UserManageService?wsdl'
	}

}