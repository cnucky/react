// Generated by method-generator.js. DOT NOT MODIFY!ยฃยก

var _ = require('underscore');
var path = require('path');
var jws = require(path.join(process.cwd(), 'utils/jws'));
var appConfig = require('../config.js');
var url = 'http://' + appConfig['app-common'] + '/BusinessCommon/services/HolographicFileService?wsdl';

module.exports = function (req, res) {
	return {
		

			"Hello": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "Hello", args, callback, req, res);
			},
			

			"getEventObj": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getEventObj", args, callback, req, res);
			},
			

			"getObjectAccounts": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getObjectAccounts", args, callback, req, res);
			},
			

			"getObjectAddresses": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getObjectAddresses", args, callback, req, res);
			},
			

			"getObjectEvent": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getObjectEvent", args, callback, req, res);
			},
			

			"getObjectHitStat": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getObjectHitStat", args, callback, req, res);
			},
			

			"getObjectInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getObjectInfo", args, callback, req, res);
			},
			

			"getObjectOrg": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getObjectOrg", args, callback, req, res);
			},
			

			"getOrgEventQueryResult": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getOrgEventQueryResult", args, callback, req, res);
			},
			

			"getOrgEventRelatedResult": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getOrgEventRelatedResult", args, callback, req, res);
			},
			

			"getOrgObj": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getOrgObj", args, callback, req, res);
			},
			

			"getOrganizationTree": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getOrganizationTree", args, callback, req, res);
			},
			

			"getOrganizationsByDir": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getOrganizationsByDir", args, callback, req, res);
			},
			

			"getPeopleQueryResult": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getPeopleQueryResult", args, callback, req, res);
			},
			

			"getSpyObjUrlByNumber": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getSpyObjUrlByNumber", args, callback, req, res);
			},
			

			"getStatInfoForSpyenemylib": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getStatInfoForSpyenemylib", args, callback, req, res);
			},
			

			"getTargetInfo": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "getTargetInfo", args, callback, req, res);
			},
			

			"setTargetPhoto": function (args, callback) {
				if (_.isFunction(args)) {
					callback = args;
					args = {};
				}
				return jws(url, "setTargetPhoto", args, callback, req, res);
			},
			

		url: 'http://' + appConfig['app-common'] + '/BusinessCommon/services/HolographicFileService?wsdl'
	}

}